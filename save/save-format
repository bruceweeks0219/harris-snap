extension: .sav

Format is textual (human-readable)

Format, sort of printfy
"HARR:%hhu.%hhu.%hhu\n", VER_MAJ, VER_MIN, VER_REV // Magic ID, Harris version.
"DATE:%02d-%02d-%04d\n", day, month, year
optional
	"DClasses:%u\n", DIFFICULTY_CLASSES // should be present if any Difficulty: other than 0 are
possibly-multiple-times
	"Difficulty:%u,%u\n", class, level // class 0 sets all classes, later can override.  level is 0, 1 or 2
"Confid:%la\n", confid
"Morale:%la\n", morale
"Budget:%u+%u\n", cash, cshr
"TPrio:%u,%u,%u,%u\n", tfav[0], tfd[0], tfav[1], tfd[1]
"IPrio:%u,%u,%u,%u\n", ifav[0], ifd[0], ifav[1], ifd[1]
"Types:%u\n", ntypes // should be a constant, but might change between versions/modpacks; if so, will need some code that's aware of old versions
for(i=0;i<ntypes;i++)
	if(state.btypes[i])
		"Prio %u:%u,%u,%u,%u\n", i, types[i].prio, types[i].pribuf, types[i].pc, types[i].pcbuf
	else
		"NoType %u:\n", i
"Navaids:%u\n", NNAVAIDS // should be constant
for(i=0;i<NNAVAIDS;i++)
	"Nprio %u:%d,%u\n", i, state.nap[i], state.napb[i]
"Bombers:%u\n", nbombers
for(i=0;i<nbombers;i++)
	"Type %u:%u,%u,%u,%s,%u,%u,%d,%u\n", bomber[i].type, bomber[i].failed, bomber[i].nav[], bomber[i].pff, pacid(bomber[i].id), bomber[i].mark, bomber[i].train, bomber[i].squadron, bomber[i].flight
"Bases:%u\n", nbases // should be a constant
for(i=0;i<nbases;i++)
	"Base %u:%u\n", i, base[i].pprog
"Paving:%d\n", paving // base number or -1
"Squadrons:%u\n", nsquads
for(i=0;i<nsquads;i++)
	"Squad %u:%u,%u,%u,%u,%u\n", i, squad[i].number, squad[i].base, squad[i].third_flight, squad[i].btype, squad[i].rtime
"TPipe:%u\n", TPIPE__MAX
for(i=0;i<TPIPE__MAX;i++)
	"TStage %u:%d,%u\n", i, tpipe[i].dwell, tpipe[i].cont
"Crews:%u\n", ncrews
for(i=0;i<ncrews;i++)
	"%s %c:%la,%la,%la,%u,%u,%u,%d,%u,%d,%d,%s\n", cstatuses[crews[i].status], cclasses[crews[i].class].letter, crews[i].skill, crews[i].heavy, crews[i].lanc, crews[i].lrate, crews[i].tour_ops, crews[i].full_tours, crews[i].assignment, crews[i].group, crews[i].squadron, crews[i].flight, pacid(crews[i].id)
"GProd:%u\n", iclasses // should be a constant
for(i=0;i<iclasses;i++)
	"IClass %u:%la\n", i, gprod[i]
"FTypes:%u\n", nftypes // should be a constant
"FBases:%u\n", nfbases // should be a constant
"Fighters:%u\n", nfighters
for(i=0;i<nfighters;i++)
	either
		"Type %u:%u,%u,NOID\n", fighter[i].type, fighter[i].base, fighter[i].radar
	or
		"Type %u:%u,%u,%s\n", fighter[i].type, fighter[i].base, fighter[i].radar, pacid(fighter[i].id)
"Flaks:%u\n", nflaks // should be a constant
optional // else assume flags=0 for all sites
	for(i=0;i<nflaks;i++)
		"Site %u:%u\n", i, flags // flag 1 is flaks[i].mapped; no others defined
either
{
	"Targets:%hhu\n", ntargs // should be a constant
	for(i=0;i<ntargs;i++)
		optionally // otherwise assume 100, 100, 0; cannot omit last Targ line
			"Targ %hhu:%la,%la,%la,%la\n", i, targs[i].dmg, targs[i].flk, targs[i].heat, targs[i].flam
}
or
{
	"Targets init:%la,%la,%la,%la\n", targs[*].dmg, targs[*].flk, targs[*].heat, targs[*].flam
}
either
{
	"Weather state:%la,%la\n", push, slant
	for(x=0;x<256;x++)
	{
		for(y=0;y<128;y++)
		{
			"%la,%la,", p[x][y], t[x][y]
		}
		"\n"
	}
}
or
{
	"Weather rand:%d\n", seed
}
for(i=0;i<NEVENTS;i++)
	if(evented[i])
		"Evented:EVENT_%s\n", event_names[i]
"Messages:%u\n", nmsgs
for(i=0;i<nmsgs;i++)
	"%s\n.\n", msg[i]
"History:%u\n", hist.nents
for(i=0;i<hist.nents;i++)
	"%s\n", hist.ents[i] // for history entry format see '../stat-spec'
